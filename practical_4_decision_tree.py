# -*- coding: utf-8 -*-
"""Practical 4: Decision Tree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16DH-e51ss-mIGsAs6SGhefHd6zAIMUGP

# Practical 4:
> ## Implement Decision Tree

Submitted By:
- Aman Kumar
- 2019UCO1634
- CoE - 2
"""

# Load libraries
import pandas as pd
from sklearn.tree import DecisionTreeClassifier 
from sklearn.model_selection import train_test_split
from sklearn import metrics

# load dataset
pima = pd.read_csv("/content/Copy of diabetes.csv")

pima.head()

#split dataset in features and target variable
feature_cols = ['Pregnancies', 'Insulin', 'BMI', 'Age','Glucose','BloodPressure','DiabetesPedigreeFunction']
X = pima[feature_cols]
y = pima['Outcome']

# Split dataset into training set and test set
# 70 - 30 split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)

# create classifier and train it
clf = DecisionTreeClassifier()
clf = clf.fit(X_train,y_train)

# predict response
y_pred = clf.predict(X_test)

# Model Accuracy
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

# Improving the performance using different DT algorithms and limiting depth

clf2 = DecisionTreeClassifier(criterion="entropy", max_depth=3)
clf2 = clf2.fit(X_train,y_train)
y_pred2 = clf2.predict(X_test)
print("Accuracy:",metrics.accuracy_score(y_test, y_pred2))

clf3 = DecisionTreeClassifier(criterion="entropy", max_depth=4)
clf3 = clf3.fit(X_train,y_train)
y_pred3 = clf3.predict(X_test)
print("Accuracy:",metrics.accuracy_score(y_test, y_pred3))

clf4 = DecisionTreeClassifier(criterion="entropy", max_depth=5)
clf4 = clf4.fit(X_train,y_train)
y_pred4 = clf4.predict(X_test)
print("Accuracy:",metrics.accuracy_score(y_test, y_pred4))

"""## Visualization"""

# displaying the decision tree

from sklearn.tree import export_graphviz
from six import StringIO  
from IPython.display import Image  
import pydotplus

dot_data = StringIO()
export_graphviz(clf, out_file=dot_data,  
                filled=True, rounded=True,
                special_characters=True,feature_names = feature_cols,class_names=['0','1'])
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  
graph.write_png('diabetes.png')
Image(graph.create_png())





dot_data = StringIO()
export_graphviz(clf2, out_file=dot_data,  
                filled=True, rounded=True,
                special_characters=True,feature_names = feature_cols,class_names=['0','1'])
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  
graph.write_png('diabetes.png')
Image(graph.create_png())

dot_data = StringIO()
export_graphviz(clf3, out_file=dot_data,  
                filled=True, rounded=True,
                special_characters=True,feature_names = feature_cols,class_names=['0','1'])
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  
graph.write_png('diabetes.png')
Image(graph.create_png())